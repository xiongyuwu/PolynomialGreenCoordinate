cmake_minimum_required(VERSION 3.7)
project(PolynomialGreenCoordinate)

#设置不生成MinSizeRel;RelWithDebInfo
set(CMAKE_CONFIGURATION_TYPES "Debug;Release")

add_definitions(/D_USE_MATH_DEFINES)

if(MSVC)
    add_compile_options(/bigobj)
endif()

#Complier
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    message(STATUS "编译器是gcc")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    message(STATUS "编译器是msvc")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    message(STATUS "编译器是 msvc 或 AppleClang")
    set(Qt5Core_DIR "D:/ProgramFiles/Qt/5.14.2/5.14.2/msvc2017_64/lib/cmake/Qt5Core")
    set(Qt5Gui_DIR "D:/ProgramFiles/Qt/5.14.2/5.14.2/msvc2017_64/lib/cmake/Qt5Gui")
    set(Qt5OpenGL_DIR "D:/ProgramFiles/Qt/5.14.2/5.14.2/msvc2017_64/lib/cmake/Qt5OpenGL")
    set(Qt5Widgets_DIR "D:/ProgramFiles/Qt/5.14.2/5.14.2/msvc2017_64/lib/cmake/Qt5Widgets")
    find_package(OpenGL REQUIRED)
    include_directories(${OPENGL_INCLUDE_DIR})
    find_package(GLUT REQUIRED)
    include_directories(${GLUT_INCLUDE_DIR})
endif()

#path
SET(EIGEN_PATH "D:/ProgramFiles/eigen-3.3.8")
SET(OPENMESH_PATH "D:/ProgramFiles/OpenMesh 10.0 static/include")
SET(OPENMESH_LIB_PATH "D:/ProgramFiles/OpenMesh 10.0 static/lib")

#QT
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

set(CMAKE_PREFIX_PATH "D:/ProgramFiles/Qt/5.14.2/5.14.2/msvc2017_64")
find_package(Qt5Widgets REQUIRED)  
find_package(Qt5Core REQUIRED)
find_package(Qt5Gui REQUIRED)
find_package(Qt5OpenGL REQUIRED)
get_target_property(_qmake_executable Qt5::qmake IMPORTED_LOCATION)# https://zhuanlan.zhihu.com/p/73469206，调用windepolyqt进行自动部署
get_filename_component(_qt_bin_dir "${_qmake_executable}" DIRECTORY)
find_program(DEPLOYQT_EXECUTABLE NAMES windeployqt macdeployqt HINTS "${_qt_bin_dir}")

# 指定 Boost 的安装路径
set(BOOST_ROOT "D:/ProgramFiles/boost_1_86_0")
find_package(Boost REQUIRED)

# 或者，单独指定 Boost 的头文件和库目录
include_directories("D:/ProgramFiles/boost_1_86_0")
link_directories("D:/ProgramFiles/boost_1_86_0/stage/lib")

set(QRC_SOURCE_FILES src/surfacemeshprocessing.qrc)
qt5_add_resources(QRC_FILES ${QRC_SOURCE_FILES})

include_directories(${EIGEN_PATH})
include_directories(${OPENMESH_PATH})
link_directories(${OPENMESH_LIB_PATH})

file (GLOB ANN_FILE
    src/ANN/*
)

file (GLOB GUI_FILE
    src/MeshViewer/Aux_Transform_Mesh_Dialog.h
    src/main.cpp
    src/MeshViewer/MainViewerWidget.*
    src/MeshViewer/MeshParamDialog.*
    src/surfacemeshprocessing.cpp
    src/surfacemeshprocessing.h
)

file (GLOB MeshViewer_FILE
    src/MeshViewer/Auxiliary_Function_Mesh.cpp
    src/MeshViewer/BezierSurface.*
    src/MeshViewer/InteractiveViewerWidget.*
    src/MeshViewer/MeshDefinition.*
    src/MeshViewer/MeshViewerWidget.*
	src/MeshViewer/PGC.*
    src/MeshViewer/OpenglHeaders.h
    src/MeshViewer/QGLViewerWidget.*
)

add_executable(${PROJECT_NAME} ${SRCFILES} 
    ${ANN_FILE}
    ${GUI_FILE}
    ${MeshViewer_FILE}
    ${QRC_FILES}
)

option(DebugMode "show detailed output" OFF)
if(DebugMode)
    target_compile_definitions(PolynomialGreenCoordinate PRIVATE DEBUG_MODE=1)
    message(STATUS "Debug mode enabled - detailed output will be shown")
else()
    target_compile_definitions(PolynomialGreenCoordinate PRIVATE DEBUG_MODE=0)
    message(STATUS "Debug mode disabled")
endif()

if(WIN32)
add_custom_command(TARGET ${PROJECT_NAME}
POST_BUILD
COMMAND ${DEPLOYQT_EXECUTABLE} "$<TARGET_FILE:${PROJECT_NAME}>"
    --$<LOWER_CASE:$<CONFIG>> --qmldir ${CMAKE_SOURCE_DIR}
)
endif()

source_group(ANN FILES ${ANN_FILE})
source_group(GUI FILES ${GUI_FILE})
source_group(MeshViewer FILES ${MeshViewer_FILE})

target_link_libraries(${PROJECT_NAME} Qt5::Widgets Qt5::Core Qt5::Gui Qt5::OpenGL
    optimized OpenMeshCore 
    optimized OpenMeshTools
    debug OpenMeshCored 
    debug OpenMeshToolsd
)
if (CMAKE_SYSTEM_NAME MATCHES "Windows")
target_link_libraries(${PROJECT_NAME} 
    opengl32
    glu32   
)
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    target_link_libraries(${PROJECT_NAME} 
    ${GLUT_LIBRARY} 
    ${OPENGL_LIBRARY}
)
endif()
